{"ast":null,"code":"var _jsxFileName = \"/home/abay/task_pdf_app/frontend_react/pdf-app/src/components/FileProcessing.js\",\n  _s = $RefreshSig$();\n// src/components/FileProcessing.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileProcessing = () => {\n  _s();\n  const location = useLocation();\n  const filePath = new URLSearchParams(location.search).get('filePath');\n  const [pdfPages, setPdfPages] = useState([]);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n  useEffect(() => {\n    const fetchPdfPages = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/get-pdf-pages?filePath=${encodeURIComponent(filePath)}`);\n        if (response.ok) {\n          const {\n            pages\n          } = await response.json();\n          console.log('Fetched pages:', pages);\n          setPdfPages(pages);\n        } else {\n          console.error('Error fetching PDF pages');\n        }\n      } catch (error) {\n        console.error('Error during PDF page fetching:', error);\n      }\n    };\n    if (filePath) {\n      fetchPdfPages();\n    }\n  }, [filePath]);\n  const handlePageSelection = pageNumber => {\n    const isSelected = selectedPages.includes(pageNumber);\n    if (isSelected) {\n      // Deselect the page\n      setSelectedPages(prevSelectedPages => prevSelectedPages.filter(page => page !== pageNumber));\n    } else {\n      // Select the page\n      setSelectedPages(prevSelectedPages => [...prevSelectedPages, pageNumber]);\n    }\n  };\n  const handleCombineAndDownload = async () => {\n    try {\n      // Send a request to the server to combine selected pages and create a new PDF\n      const response = await fetch('http://localhost:3001/combine-pages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filePath,\n          selectedPages\n        })\n      });\n      if (response.ok) {\n        // Extract the combined PDF ArrayBuffer from the response\n        const combinedPdfArrayBuffer = await response.arrayBuffer();\n\n        // Create a Blob from the ArrayBuffer\n        const blob = new Blob([combinedPdfArrayBuffer], {\n          type: 'application/pdf'\n        });\n\n        // Display a success message or perform additional actions if needed\n        console.log('Combined PDF created successfully');\n\n        // Use FileSaver.js to save the Blob as a file\n        saveAs(blob, 'combined.pdf');\n      } else {\n        console.error('Error combining pages');\n      }\n    } catch (error) {\n      console.error('Error during page combination:', error);\n    }\n  };\n\n  // const handleCombineAndDownload = async () => {\n  //     try {\n  //         // Send a request to the server to combine selected pages and create a new PDF\n  //         const response = await fetch('http://localhost:3001/combine-pages', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({\n  //                 filePath,\n  //                 selectedPages,\n  //             }),\n  //         });\n\n  //         if (response.ok) {\n  //             // Extract the combined PDF buffer from the response\n  //             const combinedPdfBuffer = await response.arrayBuffer();\n\n  //             // Create a Blob from the ArrayBuffer\n  //             const combinedPdfBlob = new Blob([combinedPdfBuffer], { type: 'application/pdf' });\n\n  //             // Create a download link and trigger the download\n  //             const downloadLink = document.createElement('a');\n  //             downloadLink.href = URL.createObjectURL(combinedPdfBlob);\n  //             downloadLink.download = 'combined.pdf';\n  //             document.body.appendChild(downloadLink);\n  //             downloadLink.click();\n  //             document.body.removeChild(downloadLink);\n\n  //             // Display a success message or perform additional actions if needed\n  //             console.log('Combined PDF created successfully');\n  //         } else {\n  //             console.error('Error combining pages');\n  //         }\n  //     } catch (error) {\n  //         console.error('Error during page combination:', error);\n  //     }\n  // };\n\n  // const handleCombineAndDownload = async () => {\n  //     try {\n  //         // Send a request to the server to combine selected pages and create a new PDF\n  //         const response = await fetch('http://localhost:3001/combine-pages', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({\n  //                 filePath,\n  //                 selectedPages,\n  //             }),\n  //         });\n\n  //         if (response.ok) {\n  //             // Extract the combined PDF buffer from the response\n  //             const combinedPdfBuffer = await response.arrayBuffer();\n  //             console.log(combinedPdfBuffer)\n  //             // Convert Uint8Array to Blob\n  //             const combinedPdfBlob = new Blob([combinedPdfBuffer], { type: 'application/pdf' });\n\n  //             // Save the Blob\n  //             setOutputPdfBlob(combinedPdfBlob);\n\n  //             // Trigger the download\n  //             saveAs(combinedPdfBlob, 'combined.pdf');\n\n  //             // Display a success message or perform additional actions if needed\n  //             console.log('Combined PDF created successfully');\n  //         } else {\n  //             console.error('Error combining pages');\n  //         }\n  //     } catch (error) {\n  //         console.error('Error during page combination:', error);\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"File Processing Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Pages to Combine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pdfPages.map(pageNumber => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            margin: '5px',\n            backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white'\n          },\n          onClick: () => handlePageSelection(pageNumber),\n          children: [\"Page \", pageNumber]\n        }, pageNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCombineAndDownload,\n      children: \"Combine and Download Selected Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), outputPdfBlob && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Combined PDF:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: URL.createObjectURL(outputPdfBlob),\n        download: \"combined.pdf\",\n        children: \"Download Combined PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n};\n_s(FileProcessing, \"NRiWLEjGtpY+gmCcEh0uFAnWWeY=\", false, function () {\n  return [useLocation];\n});\n_c = FileProcessing;\nexport default FileProcessing;\nvar _c;\n$RefreshReg$(_c, \"FileProcessing\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","saveAs","jsxDEV","_jsxDEV","FileProcessing","_s","location","filePath","URLSearchParams","search","get","pdfPages","setPdfPages","selectedPages","setSelectedPages","outputPdfBlob","setOutputPdfBlob","fetchPdfPages","response","fetch","encodeURIComponent","ok","pages","json","console","log","error","handlePageSelection","pageNumber","isSelected","includes","prevSelectedPages","filter","page","handleCombineAndDownload","method","headers","body","JSON","stringify","combinedPdfArrayBuffer","arrayBuffer","blob","Blob","type","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","margin","backgroundColor","onClick","href","URL","createObjectURL","download","_c","$RefreshReg$"],"sources":["/home/abay/task_pdf_app/frontend_react/pdf-app/src/components/FileProcessing.js"],"sourcesContent":["\n\n// src/components/FileProcessing.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { saveAs } from 'file-saver';\n\nconst FileProcessing = () => {\n    const location = useLocation();\n    const filePath = new URLSearchParams(location.search).get('filePath');\n\n    const [pdfPages, setPdfPages] = useState([]);\n    const [selectedPages, setSelectedPages] = useState([]);\n    const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n\n    useEffect(() => {\n        const fetchPdfPages = async () => {\n          try {\n            const response = await fetch(`http://localhost:3001/get-pdf-pages?filePath=${encodeURIComponent(filePath)}`);\n            if (response.ok) {\n              const { pages } = await response.json();\n              console.log('Fetched pages:', pages);\n              setPdfPages(pages);\n            } else {\n              console.error('Error fetching PDF pages');\n            }\n          } catch (error) {\n            console.error('Error during PDF page fetching:', error);\n          }\n        };\n      \n        if (filePath) {\n          fetchPdfPages();\n        }\n      }, [filePath]); \n\n    const handlePageSelection = (pageNumber) => {\n        const isSelected = selectedPages.includes(pageNumber);\n\n        if (isSelected) {\n            // Deselect the page\n            setSelectedPages((prevSelectedPages) =>\n                prevSelectedPages.filter((page) => page !== pageNumber)\n            );\n        } else {\n            // Select the page\n            setSelectedPages((prevSelectedPages) => [...prevSelectedPages, pageNumber]);\n        }\n    };\n    const handleCombineAndDownload = async () => {\n        try {\n            // Send a request to the server to combine selected pages and create a new PDF\n            const response = await fetch('http://localhost:3001/combine-pages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    filePath,\n                    selectedPages,\n                }),\n            });\n    \n            if (response.ok) {\n                // Extract the combined PDF ArrayBuffer from the response\n                const combinedPdfArrayBuffer = await response.arrayBuffer();\n    \n                // Create a Blob from the ArrayBuffer\n                const blob = new Blob([combinedPdfArrayBuffer], { type: 'application/pdf' });\n    \n                // Display a success message or perform additional actions if needed\n                console.log('Combined PDF created successfully');\n    \n                // Use FileSaver.js to save the Blob as a file\n                saveAs(blob, 'combined.pdf');\n            } else {\n                console.error('Error combining pages');\n            }\n        } catch (error) {\n            console.error('Error during page combination:', error);\n        }\n    };\n\n    // const handleCombineAndDownload = async () => {\n    //     try {\n    //         // Send a request to the server to combine selected pages and create a new PDF\n    //         const response = await fetch('http://localhost:3001/combine-pages', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({\n    //                 filePath,\n    //                 selectedPages,\n    //             }),\n    //         });\n    \n    //         if (response.ok) {\n    //             // Extract the combined PDF buffer from the response\n    //             const combinedPdfBuffer = await response.arrayBuffer();\n    \n    //             // Create a Blob from the ArrayBuffer\n    //             const combinedPdfBlob = new Blob([combinedPdfBuffer], { type: 'application/pdf' });\n    \n    //             // Create a download link and trigger the download\n    //             const downloadLink = document.createElement('a');\n    //             downloadLink.href = URL.createObjectURL(combinedPdfBlob);\n    //             downloadLink.download = 'combined.pdf';\n    //             document.body.appendChild(downloadLink);\n    //             downloadLink.click();\n    //             document.body.removeChild(downloadLink);\n    \n    //             // Display a success message or perform additional actions if needed\n    //             console.log('Combined PDF created successfully');\n    //         } else {\n    //             console.error('Error combining pages');\n    //         }\n    //     } catch (error) {\n    //         console.error('Error during page combination:', error);\n    //     }\n    // };\n\n    // const handleCombineAndDownload = async () => {\n    //     try {\n    //         // Send a request to the server to combine selected pages and create a new PDF\n    //         const response = await fetch('http://localhost:3001/combine-pages', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({\n    //                 filePath,\n    //                 selectedPages,\n    //             }),\n    //         });\n\n    //         if (response.ok) {\n    //             // Extract the combined PDF buffer from the response\n    //             const combinedPdfBuffer = await response.arrayBuffer();\n    //             console.log(combinedPdfBuffer)\n    //             // Convert Uint8Array to Blob\n    //             const combinedPdfBlob = new Blob([combinedPdfBuffer], { type: 'application/pdf' });\n\n    //             // Save the Blob\n    //             setOutputPdfBlob(combinedPdfBlob);\n\n    //             // Trigger the download\n    //             saveAs(combinedPdfBlob, 'combined.pdf');\n\n    //             // Display a success message or perform additional actions if needed\n    //             console.log('Combined PDF created successfully');\n    //         } else {\n    //             console.error('Error combining pages');\n    //         }\n    //     } catch (error) {\n    //         console.error('Error during page combination:', error);\n    //     }\n    // };\n    \n    \n    return (\n        <div>\n            <h2>File Processing Page</h2>\n\n            <div>\n                <h3>Select Pages to Combine</h3>\n                <div>\n                    {pdfPages.map((pageNumber) => (\n                        <button\n                            key={pageNumber}\n                            style={{ margin: '5px', backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white' }}\n                            onClick={() => handlePageSelection(pageNumber)}\n                        >\n                            Page {pageNumber}\n                        </button>\n                    ))}\n                </div>\n            </div>\n\n            <button onClick={handleCombineAndDownload}>Combine and Download Selected Pages</button>\n\n            {outputPdfBlob && (\n                <div>\n                    <h3>Combined PDF:</h3>\n                    {/* Display the combined PDF, for example, using an embed or download link */}\n                    <a href={URL.createObjectURL(outputPdfBlob)} download=\"combined.pdf\">\n                        Download Combined PDF\n                    </a>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FileProcessing;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}