{"ast":null,"code":"var _jsxFileName = \"/home/abay/task_pdf_app/frontend_react/pdf-app/src/components/FileProcessing.js\",\n  _s = $RefreshSig$();\n// src/components/FileProcessing.js\nimport React, { useState } from 'react';\nimport FileUpload from './FileUpload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileProcessing = ({\n  setAuthenticated\n}) => {\n  _s();\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n  const handlePageSelection = pageNumber => {\n    const isSelected = selectedPages.includes(pageNumber);\n    if (isSelected) {\n      // Deselect the page\n      setSelectedPages(prevSelectedPages => prevSelectedPages.filter(page => page !== pageNumber));\n    } else {\n      // Select the page\n      setSelectedPages(prevSelectedPages => [...prevSelectedPages, pageNumber]);\n    }\n  };\n  const handleCombineAndDownload = () => {\n    // Implement logic to combine selected pages and create a new PDF\n    // For simplicity, let's assume successful combination and set it as a Blob\n    const newPdfBlob = new Blob(['Combined PDF Content'], {\n      type: 'application/pdf'\n    });\n    setOutputPdfBlob(newPdfBlob);\n\n    // You can now trigger a download, e.g., using the `FileSaver` library\n    // For this example, we'll simply log a message\n    console.log('Selected pages combined and ready for download!');\n  };\n  const handleUploadAndProcess = file => {\n    // Implement logic to process the uploaded PDF file\n    // For simplicity, let's assume successful processing\n    setAuthenticated(true);\n    console.log('PDF file uploaded and processed successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"PDF File Processing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onUpload: file => handleUploadAndProcess(file)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Pages:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [1, 2, 3, 4].map(pageNumber => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            margin: '5px',\n            backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white'\n          },\n          onClick: () => handlePageSelection(pageNumber),\n          children: [\"Page \", pageNumber]\n        }, pageNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCombineAndDownload,\n        children: \"Combine and Download Selected Pages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), outputPdfBlob && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Combined PDF:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: URL.createObjectURL(outputPdfBlob),\n        download: \"combined.pdf\",\n        children: \"Download Combined PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(FileProcessing, \"PC2jCY2od4PqvirYt4ikO6/mrMY=\");\n_c = FileProcessing;\nexport default FileProcessing;\nvar _c;\n$RefreshReg$(_c, \"FileProcessing\");","map":{"version":3,"names":["React","useState","FileUpload","jsxDEV","_jsxDEV","FileProcessing","setAuthenticated","_s","selectedPages","setSelectedPages","outputPdfBlob","setOutputPdfBlob","handlePageSelection","pageNumber","isSelected","includes","prevSelectedPages","filter","page","handleCombineAndDownload","newPdfBlob","Blob","type","console","log","handleUploadAndProcess","file","children","fileName","_jsxFileName","lineNumber","columnNumber","onUpload","map","style","margin","backgroundColor","onClick","href","URL","createObjectURL","download","_c","$RefreshReg$"],"sources":["/home/abay/task_pdf_app/frontend_react/pdf-app/src/components/FileProcessing.js"],"sourcesContent":["// src/components/FileProcessing.js\nimport React, { useState } from 'react';\nimport FileUpload from './FileUpload';\n\nconst FileProcessing = ({ setAuthenticated }) => {\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n\n  const handlePageSelection = (pageNumber) => {\n    const isSelected = selectedPages.includes(pageNumber);\n\n    if (isSelected) {\n      // Deselect the page\n      setSelectedPages((prevSelectedPages) =>\n        prevSelectedPages.filter((page) => page !== pageNumber)\n      );\n    } else {\n      // Select the page\n      setSelectedPages((prevSelectedPages) => [...prevSelectedPages, pageNumber]);\n    }\n  };\n\n  const handleCombineAndDownload = () => {\n    // Implement logic to combine selected pages and create a new PDF\n    // For simplicity, let's assume successful combination and set it as a Blob\n    const newPdfBlob = new Blob(['Combined PDF Content'], { type: 'application/pdf' });\n    setOutputPdfBlob(newPdfBlob);\n\n    // You can now trigger a download, e.g., using the `FileSaver` library\n    // For this example, we'll simply log a message\n    console.log('Selected pages combined and ready for download!');\n  };\n\n  const handleUploadAndProcess = (file) => {\n    // Implement logic to process the uploaded PDF file\n    // For simplicity, let's assume successful processing\n    setAuthenticated(true);\n    console.log('PDF file uploaded and processed successfully!');\n  };\n\n  return (\n    <div>\n      <h2>PDF File Processing</h2>\n\n      {/* Use the FileUpload component to handle file uploading */}\n      <FileUpload onUpload={(file) => handleUploadAndProcess(file)} />\n\n      <div>\n        <h3>Selected Pages:</h3>\n        <div>\n          {/* Display page numbers and provide a button to select/deselect pages */}\n          {[1, 2, 3, 4].map((pageNumber) => (\n            <button\n              key={pageNumber}\n              style={{ margin: '5px', backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white' }}\n              onClick={() => handlePageSelection(pageNumber)}\n            >\n              Page {pageNumber}\n            </button>\n          ))}\n        </div>\n\n        <button onClick={handleCombineAndDownload}>Combine and Download Selected Pages</button>\n      </div>\n\n      {outputPdfBlob && (\n        <div>\n          <h3>Combined PDF:</h3>\n          {/* Display the combined PDF, for example, using an embed or download link */}\n          <a href={URL.createObjectURL(outputPdfBlob)} download=\"combined.pdf\">\n            Download Combined PDF\n          </a>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileProcessing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}