{"ast":null,"code":"var _jsxFileName = \"/home/abay/task_pdf_app/frontend_react/pdf-app/src/components/FileProcessing.js\",\n  _s = $RefreshSig$();\n// // src/components/FileProcessing.js\n// import React, { useState } from 'react';\n// import FileUpload from './FileUpload';\n\n// const FileProcessing = ({ setAuthenticated }) => {\n//   const [selectedPages, setSelectedPages] = useState([]);\n//   const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n\n//   const handlePageSelection = (pageNumber) => {\n//     const isSelected = selectedPages.includes(pageNumber);\n\n//     if (isSelected) {\n//       // Deselect the page\n//       setSelectedPages((prevSelectedPages) =>\n//         prevSelectedPages.filter((page) => page !== pageNumber)\n//       );\n//     } else {\n//       // Select the page\n//       setSelectedPages((prevSelectedPages) => [...prevSelectedPages, pageNumber]);\n//     }\n//   };\n\n//   const handleCombineAndDownload = () => {\n//     // Implement logic to combine selected pages and create a new PDF\n//     // For simplicity, let's assume successful combination and set it as a Blob\n//     const newPdfBlob = new Blob(['Combined PDF Content'], { type: 'application/pdf' });\n//     setOutputPdfBlob(newPdfBlob);\n\n//     // You can now trigger a download, e.g., using the `FileSaver` library\n//     // For this example, we'll simply log a message\n//     console.log('Selected pages combined and ready for download!');\n//   };\n\n//   const handleUploadAndProcess = (file) => {\n//     // Implement logic to process the uploaded PDF file\n//     // For simplicity, let's assume successful processing\n//     setAuthenticated(true);\n//     console.log('PDF file uploaded and processed successfully!');\n//   };\n\n//   return (\n//     <div>\n//       <h2>PDF File Processing</h2>\n\n//       {/* Use the FileUpload component to handle file uploading */}\n//       <FileUpload onUpload={(file) => handleUploadAndProcess(file)} />\n\n//       <div>\n//         <h3>Selected Pages:</h3>\n//         <div>\n//           {/* Display page numbers and provide a button to select/deselect pages */}\n//           {[1, 2, 3, 4].map((pageNumber) => (\n//             <button\n//               key={pageNumber}\n//               style={{ margin: '5px', backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white' }}\n//               onClick={() => handlePageSelection(pageNumber)}\n//             >\n//               Page {pageNumber}\n//             </button>\n//           ))}\n//         </div>\n\n//         <button onClick={handleCombineAndDownload}>Combine and Download Selected Pages</button>\n//       </div>\n\n//       {outputPdfBlob && (\n//         <div>\n//           <h3>Combined PDF:</h3>\n//           {/* Display the combined PDF, for example, using an embed or download link */}\n//           <a href={URL.createObjectURL(outputPdfBlob)} download=\"combined.pdf\">\n//             Download Combined PDF\n//           </a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FileProcessing;\n\n// src/components/FileProcessing.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileProcessing = () => {\n  _s();\n  const location = useLocation();\n  const filePath = new URLSearchParams(location.search).get('filePath');\n  const [pdfPages, setPdfPages] = useState([]);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n  useEffect(() => {\n    const fetchPdfPages = async () => {\n      try {\n        // Check if pages have already been fetched\n        if (pdfPages.length > 0) {\n          return;\n        }\n        const response = await fetch(`http://localhost:3001/get-pdf-pages?filePath=${encodeURIComponent(filePath)}`);\n        if (response.ok) {\n          const {\n            pages\n          } = await response.json();\n          console.log('Fetched pages:', pages);\n          setPdfPages(pages);\n        } else {\n          console.error('Error fetching PDF pages');\n        }\n      } catch (error) {\n        console.error('Error during PDF page fetching:', error);\n      }\n    };\n    fetchPdfPages();\n  }, [filePath, pdfPages]);\n  const handlePageSelection = pageNumber => {\n    const isSelected = selectedPages.includes(pageNumber);\n    if (isSelected) {\n      // Deselect the page\n      setSelectedPages(prevSelectedPages => prevSelectedPages.filter(page => page !== pageNumber));\n    } else {\n      // Select the page\n      setSelectedPages(prevSelectedPages => [...prevSelectedPages, pageNumber]);\n    }\n  };\n  const handleCombineAndDownload = async () => {\n    try {\n      // Send a request to the server to combine selected pages and create a new PDF\n      const response = await fetch('http://localhost:3001/combine-pages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filePath,\n          selectedPages\n        })\n      });\n      if (response.ok) {\n        // Extract the combined PDF blob from the response\n        const blob = await response.blob();\n        setOutputPdfBlob(blob);\n\n        // Display a success message or perform additional actions if needed\n        console.log('Combined PDF created successfully');\n      } else {\n        console.error('Error combining pages');\n      }\n    } catch (error) {\n      console.error('Error during page combination:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"File Processing Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Pages to Combine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pdfPages.map(pageNumber => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            margin: '5px',\n            backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white'\n          },\n          onClick: () => handlePageSelection(pageNumber),\n          children: [\"Page \", pageNumber]\n        }, pageNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCombineAndDownload,\n      children: \"Combine and Download Selected Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), outputPdfBlob && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Combined PDF:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: URL.createObjectURL(outputPdfBlob),\n        download: \"combined.pdf\",\n        children: \"Download Combined PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n_s(FileProcessing, \"NRiWLEjGtpY+gmCcEh0uFAnWWeY=\", false, function () {\n  return [useLocation];\n});\n_c = FileProcessing;\nexport default FileProcessing;\nvar _c;\n$RefreshReg$(_c, \"FileProcessing\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","FileProcessing","_s","location","filePath","URLSearchParams","search","get","pdfPages","setPdfPages","selectedPages","setSelectedPages","outputPdfBlob","setOutputPdfBlob","fetchPdfPages","length","response","fetch","encodeURIComponent","ok","pages","json","console","log","error","handlePageSelection","pageNumber","isSelected","includes","prevSelectedPages","filter","page","handleCombineAndDownload","method","headers","body","JSON","stringify","blob","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","margin","backgroundColor","onClick","href","URL","createObjectURL","download","_c","$RefreshReg$"],"sources":["/home/abay/task_pdf_app/frontend_react/pdf-app/src/components/FileProcessing.js"],"sourcesContent":["// // src/components/FileProcessing.js\n// import React, { useState } from 'react';\n// import FileUpload from './FileUpload';\n\n// const FileProcessing = ({ setAuthenticated }) => {\n//   const [selectedPages, setSelectedPages] = useState([]);\n//   const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n\n//   const handlePageSelection = (pageNumber) => {\n//     const isSelected = selectedPages.includes(pageNumber);\n\n//     if (isSelected) {\n//       // Deselect the page\n//       setSelectedPages((prevSelectedPages) =>\n//         prevSelectedPages.filter((page) => page !== pageNumber)\n//       );\n//     } else {\n//       // Select the page\n//       setSelectedPages((prevSelectedPages) => [...prevSelectedPages, pageNumber]);\n//     }\n//   };\n\n//   const handleCombineAndDownload = () => {\n//     // Implement logic to combine selected pages and create a new PDF\n//     // For simplicity, let's assume successful combination and set it as a Blob\n//     const newPdfBlob = new Blob(['Combined PDF Content'], { type: 'application/pdf' });\n//     setOutputPdfBlob(newPdfBlob);\n\n//     // You can now trigger a download, e.g., using the `FileSaver` library\n//     // For this example, we'll simply log a message\n//     console.log('Selected pages combined and ready for download!');\n//   };\n\n//   const handleUploadAndProcess = (file) => {\n//     // Implement logic to process the uploaded PDF file\n//     // For simplicity, let's assume successful processing\n//     setAuthenticated(true);\n//     console.log('PDF file uploaded and processed successfully!');\n//   };\n\n//   return (\n//     <div>\n//       <h2>PDF File Processing</h2>\n\n//       {/* Use the FileUpload component to handle file uploading */}\n//       <FileUpload onUpload={(file) => handleUploadAndProcess(file)} />\n\n//       <div>\n//         <h3>Selected Pages:</h3>\n//         <div>\n//           {/* Display page numbers and provide a button to select/deselect pages */}\n//           {[1, 2, 3, 4].map((pageNumber) => (\n//             <button\n//               key={pageNumber}\n//               style={{ margin: '5px', backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white' }}\n//               onClick={() => handlePageSelection(pageNumber)}\n//             >\n//               Page {pageNumber}\n//             </button>\n//           ))}\n//         </div>\n\n//         <button onClick={handleCombineAndDownload}>Combine and Download Selected Pages</button>\n//       </div>\n\n//       {outputPdfBlob && (\n//         <div>\n//           <h3>Combined PDF:</h3>\n//           {/* Display the combined PDF, for example, using an embed or download link */}\n//           <a href={URL.createObjectURL(outputPdfBlob)} download=\"combined.pdf\">\n//             Download Combined PDF\n//           </a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FileProcessing;\n\n\n// src/components/FileProcessing.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst FileProcessing = () => {\n    const location = useLocation();\n    const filePath = new URLSearchParams(location.search).get('filePath');\n\n    const [pdfPages, setPdfPages] = useState([]);\n    const [selectedPages, setSelectedPages] = useState([]);\n    const [outputPdfBlob, setOutputPdfBlob] = useState(null);\n\n    useEffect(() => {\n        const fetchPdfPages = async () => {\n            try {\n                // Check if pages have already been fetched\n                if (pdfPages.length > 0) {\n                    return;\n                }\n\n                const response = await fetch(`http://localhost:3001/get-pdf-pages?filePath=${encodeURIComponent(filePath)}`);\n                if (response.ok) {\n                    const { pages } = await response.json();\n                    console.log('Fetched pages:', pages);\n                    setPdfPages(pages);\n                } else {\n                    console.error('Error fetching PDF pages');\n                }\n            } catch (error) {\n                console.error('Error during PDF page fetching:', error);\n            }\n        };\n\n        fetchPdfPages();\n    }, [filePath, pdfPages]);\n    \n    const handlePageSelection = (pageNumber) => {\n        const isSelected = selectedPages.includes(pageNumber);\n\n        if (isSelected) {\n            // Deselect the page\n            setSelectedPages((prevSelectedPages) =>\n                prevSelectedPages.filter((page) => page !== pageNumber)\n            );\n        } else {\n            // Select the page\n            setSelectedPages((prevSelectedPages) => [...prevSelectedPages, pageNumber]);\n        }\n    };\n\n    const handleCombineAndDownload = async () => {\n        try {\n            // Send a request to the server to combine selected pages and create a new PDF\n            const response = await fetch('http://localhost:3001/combine-pages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    filePath,\n                    selectedPages,\n                }),\n            });\n\n            if (response.ok) {\n                // Extract the combined PDF blob from the response\n                const blob = await response.blob();\n                setOutputPdfBlob(blob);\n\n                // Display a success message or perform additional actions if needed\n                console.log('Combined PDF created successfully');\n            } else {\n                console.error('Error combining pages');\n            }\n        } catch (error) {\n            console.error('Error during page combination:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>File Processing Page</h2>\n\n            <div>\n                <h3>Select Pages to Combine</h3>\n                <div>\n                    {pdfPages.map((pageNumber) => (\n                        <button\n                            key={pageNumber}\n                            style={{ margin: '5px', backgroundColor: selectedPages.includes(pageNumber) ? 'lightblue' : 'white' }}\n                            onClick={() => handlePageSelection(pageNumber)}\n                        >\n                            Page {pageNumber}\n                        </button>\n                    ))}\n                </div>\n            </div>\n\n            <button onClick={handleCombineAndDownload}>Combine and Download Selected Pages</button>\n\n            {outputPdfBlob && (\n                <div>\n                    <h3>Combined PDF:</h3>\n                    {/* Display the combined PDF, for example, using an embed or download link */}\n                    <a href={URL.createObjectURL(outputPdfBlob)} download=\"combined.pdf\">\n                        Download Combined PDF\n                    </a>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FileProcessing;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}